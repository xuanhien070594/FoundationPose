"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class lcmt_object_state(object):
    __slots__ = ["utime", "object_name", "num_positions", "num_velocities", "position_names", "position", "velocity_names", "velocity"]

    __typenames__ = ["int64_t", "string", "int32_t", "int32_t", "string", "double", "string", "double"]

    __dimensions__ = [None, None, None, None, ["num_positions"], ["num_positions"], ["num_velocities"], ["num_velocities"]]

    def __init__(self):
        self.utime = 0
        self.object_name = ""
        self.num_positions = 0
        self.num_velocities = 0
        self.position_names = []
        self.position = []
        self.velocity_names = []
        self.velocity = []

    def encode(self):
        buf = BytesIO()
        buf.write(lcmt_object_state._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">q", self.utime))
        __object_name_encoded = self.object_name.encode('utf-8')
        buf.write(struct.pack('>I', len(__object_name_encoded)+1))
        buf.write(__object_name_encoded)
        buf.write(b"\0")
        buf.write(struct.pack(">ii", self.num_positions, self.num_velocities))
        for i0 in range(self.num_positions):
            __position_names_encoded = self.position_names[i0].encode('utf-8')
            buf.write(struct.pack('>I', len(__position_names_encoded)+1))
            buf.write(__position_names_encoded)
            buf.write(b"\0")
        buf.write(struct.pack('>%dd' % self.num_positions, *self.position[:self.num_positions]))
        for i0 in range(self.num_velocities):
            __velocity_names_encoded = self.velocity_names[i0].encode('utf-8')
            buf.write(struct.pack('>I', len(__velocity_names_encoded)+1))
            buf.write(__velocity_names_encoded)
            buf.write(b"\0")
        buf.write(struct.pack('>%dd' % self.num_velocities, *self.velocity[:self.num_velocities]))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != lcmt_object_state._get_packed_fingerprint():
            raise ValueError("Decode error")
        return lcmt_object_state._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = lcmt_object_state()
        self.utime = struct.unpack(">q", buf.read(8))[0]
        __object_name_len = struct.unpack('>I', buf.read(4))[0]
        self.object_name = buf.read(__object_name_len)[:-1].decode('utf-8', 'replace')
        self.num_positions, self.num_velocities = struct.unpack(">ii", buf.read(8))
        self.position_names = []
        for i0 in range(self.num_positions):
            __position_names_len = struct.unpack('>I', buf.read(4))[0]
            self.position_names.append(buf.read(__position_names_len)[:-1].decode('utf-8', 'replace'))
        self.position = struct.unpack('>%dd' % self.num_positions, buf.read(self.num_positions * 8))
        self.velocity_names = []
        for i0 in range(self.num_velocities):
            __velocity_names_len = struct.unpack('>I', buf.read(4))[0]
            self.velocity_names.append(buf.read(__velocity_names_len)[:-1].decode('utf-8', 'replace'))
        self.velocity = struct.unpack('>%dd' % self.num_velocities, buf.read(self.num_velocities * 8))
        return self
    _decode_one = staticmethod(_decode_one)

    def _get_hash_recursive(parents):
        if lcmt_object_state in parents: return 0
        tmphash = (0x16a0f83d49307b4a) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if lcmt_object_state._packed_fingerprint is None:
            lcmt_object_state._packed_fingerprint = struct.pack(">Q", lcmt_object_state._get_hash_recursive([]))
        return lcmt_object_state._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", lcmt_object_state._get_packed_fingerprint())[0]

